Install GIT & make sure it is added into PATH.
Section 0 -Use GIT as local VCS. Steps to follow:
1.	Create a directory ‘project_dir’ & cd to ‘project_dir’. 
Step:1    
•	$mkdir project_dir  
•	 This command helps to create directory called project_dir
step:2
•	$cd  project_dir  
•	  This command helps to enter into the directory called project_dir
	
2.	Initialize git version database. (git init)
•	 $git init 
•	This command helps to initialize Local Git Repository

3.	Create a new file index.html.
•	$ touch index.html 
•	This command helps to create index.html file

4.	Check the git status. You should find index.html as untracked file.
•	$git status 
•	This command helps to track the status of the file
•	I found index.html as untracked file
5.	Stage the index.html file.
•	$git add index.txt 
•	 This command add file to staging area

6.	Commit index.html
•	$git commit -m “commit the index.html file” 
•	 This command helps to commit changes to local git repository

7.	Make few changes in index.html & create a new file info.txt file.

•	Added changes to index.html and created info.txt file

8.	Check git status. You should find index.html & info.txt as untracked files.

•	$git status
•	This command helps to track the status of the file
•	And I found index.html and info.txt as untracked files


9.	Configure GIT to ignore all txt files.
•	$touch .gitignore file 
•	This command helps to ignore files
•	add txt files to .gitignore file

10.	Again check the git status. You should find only index.html as untracked file.

•	$git status
•	This command helps to track the status of the file
•	And I found index.html as untracked file

11.	State & commit index.html

•	$git add index.html
•	$git commit -m “commit file”
•	This command helps to commit changes to local git repository
12.	Log all your comments so far.
•	$git log
•	it shows all the commits previously created

13.	Make some changes in index.html.
•	Modified the file index.html

14.	Revert the change made in the previous step using git command.
•	$git difftool HEAD
•	It helps to see the changes made in previous stage

15.	Again change index.html.
•	Added changes to index.html
16.	Stage index.html
•	$git add index.html
•	This command add file to staging area

17.	Revert back the last stage.
•	$git difftool HEAD 
•	It helps to see the changes made in previous stage

18.	Rename ‘add’ command to ‘my-add’.
•	$git revert -m add  my-add
•	This command helps to rename

19.	Using my_add command Stage index.html again & commit the changes.

•	$git my-add index.html
•	$git commit -m “commit the changes of file”

20.	Revert the last commit.

•	$git  revert –hard HEAD~1
•	Used to revert last commit



GIT Branching
Objective: Commit HTML, CSS & JavaScript assignments into GIT. 
SECTION-1 (HTML assignments) - Steps to follow:
21.	First take a backup of your assignments & projects. This is required because due to incorrect GIT operation you may lose your files.

22.	Create an empty directory ‘Assignments’ & cd to ‘Assignments’.

•	$mkdir Assignments
•	it creates Assignments Directory
•	$cd Assignments
•	enter into Assignments Directory


23.	Create a file README.txt inside ‘Assignments’ & write few lines about the contents of ‘Assignments’ folder.

•	$touch README.txt
•	Helps to create README.txt file

24.	Commit README.txt file.

•	$git commit -m “commit README.txt file”
•	Helps to commit changes to local git repository

25.	Now create a new branch ‘html-assignments’.

•	$ git branch html-assignments
•	Helps to create new branch

26.	Switch to ‘html-assignments’ branch.

•	$git checkout html-assignments
•	Helps to switch from one branch to another branch

27.	Copy all HTML assignments inside ‘Assignments’ folder.

•	Copied the contents from html-assignments to assignments folder.

28.	Commit HTML assignments into ‘html-assignments’ branch.
•	$git commit -m “ commit html-assignments file
•	Helps to commit changes to local git repository

29.	Make minor changes into few files belonging to ‘html-assignments’ branch.
•	Minor changes has been done to html-assignments 
•	$ git status – It shows your file is modified

30.	Commit those changed files.
•	$git commit -m “commit the changes”
•	Helps to commit changes to local git repository

31.	Switch to master branch.
•	$git checkout master
•	Helps to switch from one branch to another branch

32.	Make minor changes into README.txt file & commit those changes into master.
•	Done with minor changes to README.txt file 
•	$git status shows it is modified
•	$git add README.txt – It helps to add README.txt to git local repository
•	$git commit -m “commit the changes of this file”

33.	Again switch to ‘html-assignments’ branch.
•	$git checkout html-assignments
•	Helps to switch from one branch to another branch

34.	Make minor changes into few files belonging to ‘html-assignments’ branch.
•	Done with minor changes to html-assignments.html file
•	$git status shows it is modified
•	$git add html-assignments.html – It helps to add html-assignments.html to git local repository
35.	Commit those changes.
•	$git commit -m “commit changes to file”
•	Helps to commit changes to local git repository

36.	Switch to master.
•	$git checkout master
•	Helps to switch from one branch to another branch

37.	Merge ‘html-assignments’ branch into master. Confirm all html assignments are shown in master.
•	$git merge html-assignments
•	Helps to merge the files
38.	Finally delete the ‘html-assignments’ branch.
•	$git branch -d html-assignments.html
•	To delete we use this command

SECTION-2 - (CSS assignments) Steps to follow:
1.	Create a new branch ‘css-assignments’.
•	$ git branch css-assignments
•	Helps to create new branch

2.	Switch to ‘css-assignments’ branch.
•	$git checkout  css-assignments
•	Helps to switch from one branch to another branch

3.	Copy all CSS assignments inside ‘Assignments’ folder.
•	Copied the contents from css-assignments to assignments folder.

4.	Commit CSS assignments into ‘css-assignments’ branch.
•	$git commit -m “ commit css-assignments file
•	Helps to commit changes to local git repository



5.	Make minor changes into README.txt file on line 1 belonging to ‘css-assignments’ branch.
•	Done with minor changes to README.txt file 
•	$git status shows it is modified
  
6.	Commit those changed files.

•	$git add README.txt – It helps to add README.txt to git local repository
•	$git commit -m “commit the changes of this file”

7.	Switch to master branch.
•	$git checkout master
•	Helps to switch from one branch to another branch

8.	Make minor changes into README.txt file on line 3 & commit those changes into master.
•	Done with minor changes to README.txt file 
•	$git status shows it is modified
•	$git add README.txt – It helps to add README.txt to git local repository
•	$git commit -m “commit the changes of this file”

9.	Again switch to ‘css-assignments’ branch.
•	$git checkout css-assignments
•	Helps to switch from one branch to another branch

10.	Make minor changes into few files belonging to ‘css-assignments’ branch. 
•	Done with minor changes to css-assignments file
•	$git status shows it is modified

11.	Commit those changes.
•	$git add css-assignments – It helps to add css-assignments to git local repository
•	$git commit -m “commit changes to file”
•	Helps to commit changes to local git repository

12.	Switch to master.
•	$git checkout master
13.	Merge ‘css-assignments’ branch into master. Confirm all css assignments are shown in master.
•	$git merge css-assignments
•	Helps to merge the files
14.	Finally delete the ‘css-assignments’ branch.

•	$git branch -d css-assignments.html
•	To delete we use this command



SECTION-3 - (JavaScript assignments) Steps to follow:
1.	Create a new branch ‘js-assignments’.

•	$git branch js-assignments
•	Helps to create new branch

2.	Switch to ‘js-assignments’ branch.
•	$git checkout js-assignments
•	Helps to switch from one branch to another branch
3.	Copy all JavaScript assignments inside ‘Assignments’ folder.

•	Copied the contents from js-assignments to assignments folder.

4.	Commit JavaScript assignments into ‘js-assignments’ branch.
•	$git commit -m “ commit js-assignments file
•	Helps to commit changes to local git repository

5.	Make minor changes into README.txt file on line 1 belonging to ‘js-assignments’ branch.
•	Done with minor changes to README.txt file 
•	$git status shows it is modified

6.	Commit those changed files.
•	$git add README.txt – It helps to add README.txt to git local repository
•	$git commit -m “commit the changes of this file”

7.	Switch to master branch.
•	$git checkout master

8.	Make minor changes into README.txt file on line 1 & commit those changes into master.
•	Done with minor changes to README.txt file 
•	$git status shows it is modified



9.	Again switch to ‘js-assignments’ branch.
•	$git checkout js-assignments

10.	Make minor changes into few files belonging to ‘js-assignments’ branch.
•	Done with minor changes to jss-assignments branch
•	$git status shows it is modified

11.	Commit those changes.
•	$git add jss-assignments – It helps to add jss-assignmentsto git local repository
•	$git commit -m “commit the changes of this file”

12.	Switch to master.
•	$git checkout master


13.	Merge ‘js-assignments’ branch into master. Confirm all JavaScript assignments are shown in master.
•	$git merge jss-assignments
•	Helps to merge the files

14.	Finally delete the ‘js-assignments’ branch.
•	$git branch -d jss-assignments
•	To delete we use this command



GIT Remoting
Objective: Pushing source code into GITHUB & collaborate team members. 
SECTION-3 (Pushing assignments to remote repository) - Steps to follow:
39.	Create a github account if you do not have already.
40.	Login on into github account.
41.	Create new public repository ‘freshersbatch-oct16’.
42.	Commit & push any sample file to this repository under ‘Assignments’ directory.

SECTION-4 (Pushing source code to remote repository using Eclipse GIT plugin) - Steps to follow:
1.	One developer from project team will create eclipse projects ‘SampleProj’ & add sample source code files. Then commit all files through eclipse GIT plugin.
2.	Collaborate other team members with your github account so that they can also modify the committed files. 
3.	Other developers from same team will checkout all files from remote repository. This might get conflicts since certain files fail to merge. In such case, merge it manually.
4.	Commit & push the ‘SampleProj’ project.


