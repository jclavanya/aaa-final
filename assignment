MongoDB Lab Assignments -Day 1

MongoDB Exercise in mongo shell
Connect to a running mongo instance, use a database named mongo_practice. Document all your queries in a javascript file to use as a reference.

Insert Documents

Insert the following documents into a movies collection.
 
 
 
db.movies.insertOne({title: 'the desolation of smaug', Writer: ‘jrr tolkein', year : 2013 , actors: ' hobbit'})
db.movies.insertOne({title: 'the battle of five armies', Writer: ‘jrr tolkein', year : 2012 , actors: ' hobbit'})



Query / Find Documents

query the movies collection to
1.	get all documents
db.movies.find()

2.	get all documents with writer set to "Quentin Tarantino"

db.movies.({writer: {$eq: “Quentin Tarantino”}})

3.	get all documents where actors include "Brad Pitt"

db.movies.({actors: {$eq: “Brad Pitt”}})

4.	get all documents with franchise set to "The Hobbit"

         db.movies.({franchise: {$eq: “The Hobbit”}})
   
5.	get all movies released in the 90s
db.movies.find({year :1990})
6.	get all movies released before the year 2000 or after 2010
db.movies.find.({year: {$gt: 2010}})



Update Documents

1.	add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."

db.movies.update({title: "The Hobbit: An Unexpected Journey"}, {$set: {synopsis: “ A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}})

2.	add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."

3.	db.movies.update({title: "The Hobbit: The Desolation of Smaug "}, {$set: {synopsis: “The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
}})


4.	add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction

           db.movies.update({title: "inglorios basterds"} , {$set: {actors: "kk"}})


Text Search


1.	find all movies that have a synopsis that contains the word "Bilbo"
db.movies.find({synopsis: /Bilbo/g})

2.	find all movies that have a synopsis that contains the word "Gandalf"
db.movies.find({synopsis: /Gandalf/g})

3.	find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
db.movies.find({$and: [{synopsis: /Bilbo/g}, {synopsis: {$not: /Gandalf/g}}]})
4.	find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
db.movies.find({synopsis: /(dwarves|hobbit)/g})
5.	find all movies that have a synopsis that contains the word "gold" and "dragon"
db.movies.find({synopsis: /(gold.*dragon)/g})
Reference: https://www.tutorialspoint.com/mongodb/mongodb_text_search.htm

Delete Documents

1.	delete the movie "Pee Wee Herman's Big Adventure"
db.movies.deleteOne({title: "Pee Wee Herman's Big Adventure"})
2.	delete the movie "Avatar"
3.	db.movies.deleteOne({title: "avatar"})

Reference: https://www.tutorialspoint.com/mongodb/mongodb_delete_document.htm

Relationships

Insert the following documents into a users collection
Insert the following documents into a posts collection
 
 
 
Insert the following documents into a comments collection


where [post_obj_id] is the ObjectId of the posts document: "Borrows something"

where [post_obj_id] is the ObjectId of the posts document: "Borrows everything"

where [post_obj_id] is the ObjectId of the posts document: "Forks your repo on github

where [post_obj_id] is the ObjectId of the posts document: "Passes out at party"
 

 
where [post_obj_id] is the ObjectId of the posts document: "Reports a bug in your
code"

Querying related collections

1.	find all users
db.users.find()
2.	find all posts
db.posts.find()
3.	find all posts that was authored by "GoodGuyGreg"
db.posts.find({username: {$eq: “GoodGuyGreg”}})
4.	find all posts that was authored by "ScumbagSteve"
db.posts.find({username: {$eq: “ScumbagSteve”}})
5.	find all comments
db.comments.find()
6.	find all comments that was authored by "GoodGuyGreg"
db.comments.find({username:{$eq: “GoodGuyGreg”}})
7.	find all comments that was authored by "ScumbagSteve"
db.comments.find({username:{$eq: “ScumbagSteve”}})

8.	find all comments belonging to the post "Reports a bug in your code"
db.post.find({title: {“ Reports a bug in your code"
References: https://docs.mongodb.com/manual/reference/method/db.collection.find/


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

